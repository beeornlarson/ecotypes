write.table(row, file = "sampe.csv", sep = ",",
append = TRUE, quote = FALSE,
col.names = FALSE, row.names = FALSE)
write.table(row, file = "sampe.csv", sep = ",",
append = TRUE, quote = FALSE,
col.names = TRUE, row.names = FALSE)
row <- data.frame(ID = '1', Name = 'A', Post = 'Manager', Age = '24')
write.table(row, file = "sampe.csv", sep = ",",
append = TRUE, quote = FALSE,
col.names = TRUE, row.names = FALSE)
my_path <- paste0("E:/Phenocam Pictures/", site, "/", camera, "/Combined/")
library(lubridate)
library(stringr)
library(exifr)
library(tidyr)
library(filesstrings)
library(hms)
camera <- "TL-TL-2" #Camera Name
site <- "Toolik Lake" #Site
my_path <- paste0("E:/Phenocam Pictures/", site, "/", camera, "/Combined/")
bad_photo_path <- paste0(my_path, "Bad/")
good_photo_path <- paste0(my_path, "Good/")
test <- paste0(my_path, "Test/")
my_path
file_info1 <- file_info1%>%
filter(FileSize > 4000000)
file_info <- file_info%>%
filter(FileSize > 4000000)
july2 <- read.csv("C:/Users/ecotypes/Downloads/TL-WS-FiveMin-7.6-7.19.csv")
july3 <- read.csv("C:/Users/ecotypes/Downloads/TL-WS-FiveMin-7.19-8.9.csv")
june1 <- read.csv("C:/Users/ecotypes/Downloads/TL-WS-FiveMin-6.16-7.5.csv")
aug1 <- read.csv("C:/Users/ecotypes/Downloads/TL-WS-FiveMin-8.9-8.29.csv")
july1 <- read.csv("C:/Users/ecotypes/Downloads/TL-WS-FiveMin-7.5-7.6.csv")
d<-rbind(june1, july1, july2, july3, aug1)%>%
mutate(datetime = mdy_hm(TIMESTAMP))%>%
arrange(desc(datetime))
file_info3 <- as.data.frame(file_info2)%>%
dplyr::select(FileName, LightValue, CreateDate)%>%
mutate(datetime = floor_date(ymd_hms(substr(CreateDate, 1, 19)), unit =  "minute"),
date = date(datetime),
time = lubridate::hms(parse_hms(str_replace_all(substr(CreateDate, 12, 19), " ", ":"))))
camera <- "TL-TL-2" #Camera Name
site <- "Toolik Lake" #Site
my_path <- paste0("E:/Phenocam Pictures/", site, "/", camera, "/Combined/")
bad_photo_path <- paste0(my_path, "Bad/")
good_photo_path <- paste0(my_path, "Good/")
test <- paste0(my_path, "Test/")
my_path
file_list <- list.files(my_path, full = TRUE, pattern = "*.JPG")
file_info2 <- read_exif(file_list)%>%
dplyr::select(FileName, CreateDate, FileSize)%>%
dplyr::mutate(CreateDate = str_replace_all(CreateDate, ":", " "))
file_info2 <- file_info2%>%
filter(FileSize > 4000000)
ggplot(file_info2, aes(FileSize))+
geom_density()+
geom_vline(xintercept = mean(file_info2$FileSize)-2.5*sd(file_info2$FileSize))
file_list
file_list <- as.data.frame(list.files(my_path, full = TRUE, pattern = "*.JPG"))
file_list
file_list <- as.data.frame(file_names = list.files(my_path, full = TRUE, pattern = "*.JPG"))
file_list <- as.data.frame(file_names <- list.files(my_path, full = TRUE, pattern = "*.JPG"))
file_list
file_list = as.data.frame(file_names = list.files(my_path, full = TRUE, pattern = "*.JPG"))
file_list <- data.frame(file_names = list.files(my_path, full = TRUE, pattern = "*.JPG"))
file_list
file_info2 <- read_exif(file_list)%>%
dplyr::select(FileName, CreateDate, FileSize)%>%
dplyr::mutate(CreateDate = str_replace_all(CreateDate, ":", " "))
file_list <- file_names = list.files(my_path, full = TRUE, pattern = "*.JPG")
file_list <- file_names = list.files(my_path, full = TRUE, pattern = "*.JPG")
file_list <- list.files(my_path, full = TRUE, pattern = "*.JPG")
file_list
file_info <- read_exif(file_list)%>%
dplyr::select(FileName, CreateDate, FileSize)%>%
dplyr::mutate(CreateDate = str_replace_all(CreateDate, ":", " "))
file_info
file_info_adj <- file_info%>%
filter(FileSize > 4000000)
file_list <- list.files(my_path, full = TRUE, pattern = "*.JPG")
file_info <- read_exif(file_list)%>%
dplyr::select(FileName, CreateDate, FileSize)%>%
dplyr::mutate(CreateDate = str_replace_all(CreateDate, ":", " "))
file_info_adj <- file_info%>%
filter(FileSize > 4000000)
for(i in 1:length(file_info2[[1]])){
old_name <- paste0(my_path, file_info2[[i,1]])
new_name <- paste0(my_path, file_info2[[i,2]], ".JPG")
file.rename(from = old_name, to = new_name)}
file.rename(from = old_name, to = new_name)}
for(i in 1:length(file_info2[[1]])){
old_name <- paste0(my_path, file_info2[[i,1]])
new_name <- paste0(my_path, file_info2[[i,2]], ".JPG")
file.rename(from = old_name, to = new_name)}
file_list <- list.files(my_path, full = TRUE, pattern = "*.JPG")
file_info <- read_exif(file_list)%>%
dplyr::select(FileName, CreateDate, FileSize)%>%
dplyr::mutate(CreateDate = str_replace_all(CreateDate, ":", " "))
file_info_adj <- file_info%>%
filter(FileSize > 4000000)
for(i in 1:length(file_info2[[1]])){
old_name <- paste0(my_path, file_info2[[i,1]])
new_name <- paste0(my_path, file_info2[[i,2]], ".JPG")
file.rename(from = old_name, to = new_name)}
ifelse(file_info2[[i,3]] < (mean(file_info2[[3]]) - 2.5*sd(file_info2[[3]])),
move_files(new_name, bad_photo_path, overwrite = FALSE),
move_files(new_name, good_photo_path, overwrite = FALSE))
}
file_info_adj
mean(file_info_adj[[3]]
mean(file_info_adj[[3]])
mean(file_info_adj$FileSize)
file_info[[i,3]]
for(i in 1:length(file_info[[1]])){
old_name <- paste0(my_path, file_info[[i,1]])
new_name <- paste0(my_path, file_info[[i,2]], ".JPG")
file.rename(from = old_name, to = new_name)}
ifelse(file_info[[i,3]] < (mean(file_info_adj$FileSize) - 2.5*sd(file_info_adj$FileSize)),
move_files(new_name, bad_photo_path, overwrite = FALSE),
move_files(new_name, good_photo_path, overwrite = FALSE))
}
file_info_adj <- file_info%>%
filter(FileSize > 4000000)%>%
mutate(index = count())
file_info_adj <- file_info%>%
filter(FileSize > 4000000)%>%
rowid_to_column()
file_info_adj
file_info
bad_file_info <- file_info%>%
select(CreateDate, FileSize)
bad_file_info
for(i in 1:length(file_info[[1]])){
old_name <- paste0(my_path, file_info[[i,1]])
new_name <- paste0(my_path, file_info[[i,2]], ".JPG")
file.rename(from = old_name, to = new_name) #renaming each photo to make it match the date it was taken
if(file_info[[i,3]] < (mean(file_info_adj$FileSize) - 2.5*sd(file_info_adj$FileSize))){
move_files(new_name, bad_photo_path, overwrite = FALSE)
write.table(bad_file_info, "bad photo log.csv", sep = ",", append = TRUE, quote = FALSE, col.names = FALSE, row.names = FALSE)
#if file is too small, move it to a different folder and log the co
}
else{
move_files(new_name, good_photo_path, overwrite = FALSE)
}
}
file_list <- list.files(my_path, full = TRUE, pattern = "*.JPG")
file_info <- read_exif(file_list)%>%
dplyr::select(FileName, CreateDate, FileSize)%>%
dplyr::mutate(CreateDate = str_replace_all(CreateDate, ":", " "))
file_info_adj <- file_info%>%
filter(FileSize > 4000000)%>%
rowid_to_column()
bad_file_info <- file_info%>%
select(CreateDate, FileSize)
for(i in 1:length(file_info[[1]])){
old_name <- paste0(my_path, file_info[[i,1]])
new_name <- paste0(my_path, file_info[[i,2]], ".JPG")
file.rename(from = old_name, to = new_name) #renaming each photo to make it match the date it was taken
if(file_info[[i,3]] < (mean(file_info_adj$FileSize) - 2.5*sd(file_info_adj$FileSize))){
move_files(new_name, bad_photo_path, overwrite = FALSE)
write.table(data.frame(file_info$CreateDate, file_info$FileSize), "bad photo log.csv", sep = ",", append = TRUE, quote = FALSE, col.names = FALSE, row.names = FALSE)
#if file is too small, move it to a different folder and log the co
}
else{
move_files(new_name, good_photo_path, overwrite = FALSE)
}
}
write.table(data.frame(file_info$CreateDate[i], file_info$FileSize[i]), "bad photo log.csv", sep = ",", append = TRUE, quote = FALSE, col.names = FALSE, row.names = FALSE)
for(i in 1:length(file_info[[1]])){
old_name <- paste0(my_path, file_info[[i,1]])
new_name <- paste0(my_path, file_info[[i,2]], ".JPG")
file.rename(from = old_name, to = new_name) #renaming each photo to make it match the date it was taken
if(file_info[[i,3]] < (mean(file_info_adj$FileSize) - 2.5*sd(file_info_adj$FileSize))){
move_files(new_name, bad_photo_path, overwrite = FALSE)
write.table(data.frame(file_info$CreateDate[i], file_info$FileSize[i]), "bad photo log.csv", sep = ",", append = TRUE, quote = FALSE, col.names = FALSE, row.names = FALSE)
#if file is too small, move it to a different folder and log the co
}
else{
move_files(new_name, good_photo_path, overwrite = FALSE)
}
}
write.table(data.frame(file_info[[i, 2]], file_info[[i,3]]), "bad photo log.csv", sep = ",", append = TRUE, quote = FALSE, col.names = FALSE, row.names = FALSE)
for(i in 1:length(file_info[[1]])){
old_name <- paste0(my_path, file_info[[i,1]])
new_name <- paste0(my_path, file_info[[i,2]], ".JPG")
file.rename(from = old_name, to = new_name) #renaming each photo to make it match the date it was taken
if(file_info[[i,3]] < (mean(file_info_adj$FileSize) - 2.5*sd(file_info_adj$FileSize))){
move_files(new_name, bad_photo_path, overwrite = FALSE)
write.table(data.frame(file_info[[i, 2]], file_info[[i,3]]), "bad photo log.csv", sep = ",", append = TRUE, quote = FALSE, col.names = FALSE, row.names = FALSE)
#if file is too small, move it to a different folder and log the co
}
else{
move_files(new_name, good_photo_path, overwrite = FALSE)
}
}
d3
write_csv(file_info, file = "CF-CF-9_exif")
write_csv(file_info, file = "CF-CF-9_exif.csv")
exif <- read.csv("CF-CF-9_exif.csv")
exif
exif <- read.csv("CF-CF-9_exif.csv")%>%
mutate(datetime = ymd_hms(CreateDate))
exif
right_join(d, exif, by = "datetime")
d <- read.csv("E:/Phenocam_Analysis/CF_CF_9-dates.csv")%>%
select(1,2,6,8)%>%
mutate(datetime = ymd_hms(substr(img, 1, 19)),
date = date(datetime),
time = parse_hms(str_replace_all(substr(img, 12, 19), " ", ":")))%>%
select('datetime', 'date', 'time', 'idx_label', 'RGB.2G_RBi', "RGB.pctG")
right_join(d, exif, by = "datetime")
d2<-d%>%
group_by(date)%>%
summarize(median = median(RGB.2G_RBi))
d2
d3 <- d %>%
right_join(d2, d, by = 'date')%>%
mutate(resid = RGB.2G_RBi - median)
right_join(d3, exif, by = "datetime")
ggplot(aes(x = FileSize, y = resid))
ggplot(aes(x = FileSize, y = resid))+
geom_point()
d5 <- right_join(d3, exif, by = "datetime")
ggplot(d5, aes(x = FileSize, y = resid))+
geom_point()
ggplot(d5, aes(x = FileSize, y = resid))+
geom_point()+
geom_smooth()
exif <- read.csv("CF-CF-9_exif.csv")%>%
mutate(datetime = ymd_hms(CreateDate))
d5 <- right_join(d3, exif, by = "datetime")
ggplot(d5, aes(x = FileSize, y = resid))+
geom_point()+
geom_smooth()
plot_ly(d5, x = ~FileSize, y = ~resid))
plot_ly(d5, x = ~FileSize, y = ~resid)
plot_ly(d5, x = ~FileSize, y = ~resid, hovertext = paste0("Date:", d5$datetime))
z_score <- function(x) {z <- (x-mean(x, na.rm = TRUE))/sd(x, na.rm = TRUE)
return(z)}
x <- (1:20)
z_score(x)
d2 <- read.csv("C:/Users/ecotypes/Downloads/Total Green Length - Coldfoot.csv")%>%
select(1:18)
rates2 <- d2%>%
# mutate(X201 = X201/X153,
#       X194 = X194/X153,
#       X187 = X187/X153,
#       X180 = X180/X153,
#       X173 = X173/X153,
#       X166 = X166/X153,
#       X160 = X160/X153,
#       X153 = 1)%>%
pivot_longer(6:18, names_to = "Day", values_to = "Rate")%>%
mutate(date = floor_date(as.Date(as.numeric(substr(Day, 2,4))-1, origin = "2022-01-01")),
Loc = "CF")%>%
filter(Plot == "CF9")%>%
filter(Ind == "A")
joined <- full_join(d3, rates2, by = "date")%>%
mutate(z_EG = z_score(RGB.2G_RBi),
z_GCC = z_score(RGB.pctG),
z_TGL = z_score(Rate))
plot_ly(d4, x = ~datetime, y = ~RGB.2G_RBi, hoverinfo = "text", hovertext = paste("Date: ", d4$datetime, "<br>2G_RBi: ", d4$RGB.2G_RBi, "<br>Index: ", d4$idx_label), type = "scatter", mode = "lines+markers")%>%
layout(xaxis=list(title = "Date"), yaxis = list(title = "2G_RBi"))
ggplot(joined)+
geom_point(aes(x = date, y = z_GCC), color = "Blue")+
geom_point(aes(x = date, y = z_TGL), color = "Red", size = 3)+
theme_bw()+
labs(y = "Z-score", x = "Date")
z_score <- function(x) {z <- (x-mean(x, na.rm = TRUE))/sd(x, na.rm = TRUE)
return(z)}
x <- (1:20)
z_score(x)
d2 <- read.csv("C:/Users/ecotypes/Downloads/Total Green Length - Coldfoot.csv")%>%
select(1:18)
rates2 <- d2%>%
# mutate(X201 = X201/X153,
#       X194 = X194/X153,
#       X187 = X187/X153,
#       X180 = X180/X153,
#       X173 = X173/X153,
#       X166 = X166/X153,
#       X160 = X160/X153,
#       X153 = 1)%>%
pivot_longer(6:18, names_to = "Day", values_to = "Rate")%>%
mutate(date = floor_date(as.Date(as.numeric(substr(Day, 2,4))-1, origin = "2022-01-01")),
Loc = "CF")%>%
filter(Plot == "CF9")%>%
filter(Ind == "A")
joined <- full_join(d3, rates2, by = "date")%>%
mutate(z_EG = z_score(RGB.2G_RBi),
z_GCC = z_score(RGB.pctG),
z_TGL = z_score(Rate))
plot_ly(d4, x = ~datetime, y = ~RGB.2G_RBi, hoverinfo = "text", hovertext = paste("Date: ", d4$datetime, "<br>2G_RBi: ", d4$RGB.2G_RBi, "<br>Index: ", d4$idx_label), type = "scatter", mode = "lines+markers")%>%
layout(xaxis=list(title = "Date"), yaxis = list(title = "2G_RBi"))
ggplot(joined)+
geom_point(aes(x = date, y = z_GCC), color = "Blue")+
geom_point(aes(x = date, y = z_TGL), color = "Red", size = 3)+
theme_bw()+
labs(y = "Z-score", x = "Date")
d <- read.csv("E:/Phenocam_Analysis/CF_CF_9-dates.csv")%>%
select(1,2,6,8)%>%
mutate(datetime = ymd_hms(substr(img, 1, 19)),
date = date(datetime),
time = parse_hms(str_replace_all(substr(img, 12, 19), " ", ":")))%>%
select('datetime', 'date', 'time', 'idx_label', 'RGB.2G_RBi', "RGB.pctG")
RGB_data <- read.csv("E:/Phenocam_Analysis/CF_CF_9-dates.csv")%>%
select(1,2,6,8)%>%
mutate(datetime = ymd_hms(substr(img, 1, 19)),
date = date(datetime),
time = parse_hms(str_replace_all(substr(img, 12, 19), " ", ":")))%>%
select('datetime', 'date', 'time', 'idx_label', 'RGB.2G_RBi', "RGB.pctG")
RGB_data <- read.csv("E:/Phenocam_Analysis/CF_CF_9-dates.csv")%>%
select(1,2,6,8)%>%
mutate(datetime = ymd_hms(substr(img, 1, 19)),
date = date(datetime),
time = parse_hms(str_replace_all(substr(img, 12, 19), " ", ":")))%>%
select('datetime', 'date', 'time', 'idx_label', 'RGB.2G_RBi', "RGB.pctG")
glm(RGB_data$RGB.2G_RBi~RGB_data$datetime)
glm(RGB_data$RGB.2G_RBi~RGB_data$datetime^3)
library(rethinking)
install.packages("rethinking")
install.packages("rstan", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
library(tidyverse)
install.packages("StanHeaders", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
install.packages("rstan", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
install.packages(c("coda", "mvtnorm", "devtools"))
library(devtools)
devtools::install_github("rmcelreath/rethinking")
devtools::install_github("rmcelreath/rethinking")
install.packages("cmdstanr", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
devtools::install_github("rmcelreath/rethinking")
library(rethinking)
RGB_data <- read.csv("E:/Phenocam_Analysis/CF_CF_9-dates.csv")%>%
select(1,2,6,8)%>%
mutate(datetime = ymd_hms(substr(img, 1, 19)),
date = date(datetime),
time = parse_hms(str_replace_all(substr(img, 12, 19), " ", ":"))
first_day = ymd_hms(2022 01 01 00 00 00)
RGB_data <- read.csv("E:/Phenocam_Analysis/CF_CF_9-dates.csv")%>%
select(1,2,6,8)%>%
mutate(datetime = ymd_hms(substr(img, 1, 19)),
date = date(datetime),
time = parse_hms(str_replace_all(substr(img, 12, 19), " ", ":")),
first_day = ymd_hms(2022 01 01 00 00 00),
library(lubridate)
RGB_data <- read.csv("E:/Phenocam_Analysis/CF_CF_9-dates.csv")%>%
select(1,2,6,8)%>%
mutate(datetime = ymd_hms(substr(img, 1, 19)),
date = date(datetime),
time = parse_hms(str_replace_all(substr(img, 12, 19), " ", ":")),
first_day = ymd_hms(2022 01 01 00 00 00),
RGB_data <- read.csv("E:/Phenocam_Analysis/CF_CF_9-dates.csv")%>%
select(1,2,6,8)%>%
mutate(datetime = ymd_hms(substr(img, 1, 19)),
date = date(datetime),
time = parse_hms(str_replace_all(substr(img, 12, 19), " ", ":")),
first_day = ymd_hms(2022, 01, 01, 00, 00, 00),
HoY = difftime(datetime, first_day, "hours"))%>%
select('datetime', 'date', 'time', 'idx_label', 'RGB.2G_RBi', "RGB.pctG")
RGB_data <- read.csv("E:/Phenocam_Analysis/CF_CF_9-dates.csv")%>%
select(1,2,6,8)%>%
mutate(datetime = ymd_hms(substr(img, 1, 19)),
date = date(datetime),
time = parse_hms(str_replace_all(substr(img, 12, 19), " ", ":")),
first_day = ymd_hms(2022, 01, 01, 00, 00, 00),
HoY = difftime(datetime, first_day, "hours"))
ymd_hms(2022, 01, 01, 00, 00, 00)
ymd_hms(2022 01 01 00 00 00)
ymd_hms(2022-01-01 00:00:00)
RGB_data <- read.csv("E:/Phenocam_Analysis/CF_CF_9-dates.csv")%>%
select(1,2,6,8)%>%
mutate(datetime = ymd_hms(substr(img, 1, 19)),
date = date(datetime),
time = parse_hms(str_replace_all(substr(img, 12, 19), " ", ":")),
first_day = ymd_hms(2022-01-01 2:00:00),
ymd_hms(2022-01-01 2:00:00)
ymd_hms(2022-01-01-02-00-00)
RGB_data <- read.csv("E:/Phenocam_Analysis/CF_CF_9-dates.csv")%>%
select(1,2,6,8)%>%
mutate(datetime = ymd_hms(substr(img, 1, 19)),
date = date(datetime),
time = parse_hms(str_replace_all(substr(img, 12, 19), " ", ":")),
first_day = ymd_hms("2022 01 01 00 00 00"),
HoY = difftime(datetime, first_day, "hours"))%>%
select('datetime', 'date', 'time', 'idx_label', 'RGB.2G_RBi', "RGB.pctG")
RGB_data <- read.csv("E:/Phenocam_Analysis/CF_CF_9-dates.csv")%>%
select(1,2,6,8)%>%
mutate(datetime = ymd_hms(substr(img, 1, 19)),
date = date(datetime),
time = parse_hms(str_replace_all(substr(img, 12, 19), " ", ":")),
first_day = ymd_hms("2022 01 01 00 00 00"),
HoY = difftime(datetime, first_day, "hours"))
RGB_data
RGB_data <- read.csv("E:/Phenocam_Analysis/CF_CF_9-dates.csv")%>%
select(1,2,6,8)%>%
mutate(datetime = ymd_hms(substr(img, 1, 19)),
date = date(datetime),
time = parse_hms(str_replace_all(substr(img, 12, 19), " ", ":")),
first_day = ymd_hms("2022 01 01 00 00 00"),
HoY = difftime(datetime, first_day, "hours"))%>%
select('datetime', 'HoY', 'idx_label', 'RGB.2G_RBi', "RGB.pctG")
RGB_data
RGB_data <- read.csv("E:/Phenocam_Analysis/CF_CF_9-dates.csv")%>%
select(1,2,6,8)%>%
mutate(datetime = ymd_hms(substr(img, 1, 19)),
date = date(datetime),
time = parse_hms(str_replace_all(substr(img, 12, 19), " ", ":")),
first_day = ymd_hms("2022 01 01 00 00 00"),
HoY = as.numeric(difftime(datetime, first_day, "hours")))%>%
select('datetime', 'HoY', 'idx_label', 'RGB.2G_RBi', "RGB.pctG")
RGB_data
m1 <- map2stan(
alist(
RGB.pctG ~ dnorm(mu, sigma),
mu <- y_0 + a_1/(1 + exp(-(HoY - t_01)/b_1))^c_1 - a_2/(1 + exp(-(HoY - t_02)/b_2))^c_2
y_0 ~ dnorm(0, 1000),
m1 <- map2stan(
alist(
RGB.pctG ~ dnorm(mu, sigma),
mu <- y_0 + a_1/(1 + exp(-(HoY - t_01)/b_1))^c_1 - a_2/(1 + exp(-(HoY - t_02)/b_2))^c_2,
y_0 ~ dnorm(0, 1000),
a_1 ~ dnorm(0, 1000),
a_2 ~ dnorm(0, 1000),
b_1 ~ dnorm(0, 1000),
b_2 ~ dnorm(0, 1000),
c_1 ~ dnorm(0, 1000),
c_2 ~ dnorm(0, 1000),
t_1 ~ dnorm(0, 1000),
t_2 ~ dnorm(0, 1000),
sigma ~ dcauchy(0,2)
) ,
data = RGB_data
)
)?set_cmdstan_path
?set_cmdstan_path
set_cmdstan_path()
set_cmdstan_path(path = NULL)
install_cmdstan()
cmdstanr::check_cmdstan_toolchain(fix = TRUE)
m1 <- map2stan(
alist(
RGB.pctG ~ dnorm(mu, sigma),
mu <- y_0 + a_1/(1 + exp(-(HoY - t_01)/b_1))^c_1 - a_2/(1 + exp(-(HoY - t_02)/b_2))^c_2,
y_0 ~ dnorm(0, 1000),
a_1 ~ dnorm(0, 1000),
a_2 ~ dnorm(0, 1000),
b_1 ~ dnorm(0, 1000),
b_2 ~ dnorm(0, 1000),
c_1 ~ dnorm(0, 1000),
c_2 ~ dnorm(0, 1000),
t_1 ~ dnorm(0, 1000),
t_2 ~ dnorm(0, 1000),
sigma ~ dcauchy(0,2)
) ,
data = RGB_data
)
set_cmdstan_path()
set_cmdstan_path(path = NULL)
camera <- "CF-SG-3" #Camera Name
site <- "Coldfoot" #Site
my_path <- paste0("E:/Phenocam Pictures/", site, "/", camera, "/Combined/")
bad_photo_path <- paste0(my_path, "Bad/")
good_photo_path <- paste0(my_path, "Good/")
test <- paste0(my_path, "Test/")
my_path
file_list <- list.files(my_path, full = TRUE, pattern = "*.JPG")
file_info <- read_exif(file_list)%>%
dplyr::select(FileName, CreateDate, FileSize)%>%
dplyr::mutate(CreateDate = str_replace_all(CreateDate, ":", " "))
library(lubridate)
library(stringr)
library(exifr)
library(tidyr)
library(filesstrings)
library(hms)
camera <- "CF-SG-3" #Camera Name
site <- "Coldfoot" #Site
my_path <- paste0("E:/Phenocam Pictures/", site, "/", camera, "/Combined/")
bad_photo_path <- paste0(my_path, "Bad/")
good_photo_path <- paste0(my_path, "Good/")
test <- paste0(my_path, "Test/")
my_path
file_list <- list.files(my_path, full = TRUE, pattern = "*.JPG")
file_info <- read_exif(file_list)%>%
dplyr::select(FileName, CreateDate, FileSize)%>%
dplyr::mutate(CreateDate = str_replace_all(CreateDate, ":", " "))
file_info_adj <- file_info%>%
filter(FileSize > 4000000)%>%
rowid_to_column()
rowid_to_column
library(lubridate)
library(stringr)
library(exifr)
library(tidyr)
library(filesstrings)
library(hms)
library(tidyverse)
file_list <- list.files(my_path, full = TRUE, pattern = "*.JPG")
file_info <- read_exif(file_list)%>%
dplyr::select(FileName, CreateDate, FileSize)%>%
dplyr::mutate(CreateDate = str_replace_all(CreateDate, ":", " "))
file_info_adj <- file_info%>%
filter(FileSize > 4000000)%>%
rowid_to_column()
bad_file_info <- file_info%>%
select(CreateDate, FileSize)
write_csv(file_info, file = "CF-CF-9_exif.csv")
for(i in 1:length(file_info[[1]])){
old_name <- paste0(my_path, file_info[[i,1]])
new_name <- paste0(my_path, file_info[[i,2]], ".JPG")
file.rename(from = old_name, to = new_name) #renaming each photo to make it match the date it was taken
}
